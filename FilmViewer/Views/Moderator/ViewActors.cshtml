@model FilmViewer.Models.Moderator.ViewActorsViewModel
@using FilmViewer.Models
@using FilmViewer.Statics
@using PagedList.Mvc;

@{
    ViewBag.Title = "Actors";
    Html.RenderPartial("_SearchFull");

}
@section styles{
    @Styles.Render(
            "~/bundle/styles/pagedList")
}
<section class="container">
    <div class="col-sm-8 col-md-9 col-sm-push-4 col-md-push-3">
        <div class="movie">

            <div class="devider-wrapper">
                <div class="devider"></div>
            </div>
            <h2 class="page-heading">Actors list</h2>
            <div class="select-area">
                @Html.Partial("_ActorSearch")
                <div>
                    @if (TempData[UserMessages.UserMessage] != null)
                    {
                        var message = (MessageViewModel)TempData[UserMessages.UserMessage];

                        <div class="alert @message.CssClass">
                            <span class="icon-flag"></span>
                            @message.Message
                            <a class="close" data-dismiss="alert" href="#" aria-hidden="true"></a>
                        </div>
                    }
                </div>
            </div>
            <div>
                <table>
                    <tr>
                        <th>
                            @Html.ActionLink("Name", "ViewActors", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.ActorsFilter })
                        </th>
                        <th>
                            @Html.ActionLink("Birth Date", "ViewActors", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.ActorsFilter })
                        </th>
                        <th></th>

                    </tr>
                    <colgroup class="col-width-lg"></colgroup>
                    <colgroup class="col-width"></colgroup>
                    @{var count = 1;}

                    @foreach (var actor in Model.Actors)
                    {
                        <tr class="@(count % 2 == 0 ? "rates rates--top" : "rates")">
                            <td class="rates__obj">@count @actor.Name</td>
                            <td class="rates__vote">@(actor.Birthdate.HasValue ? actor.Birthdate.Value.ToShortDateString() : "")</td>
                            <td class="rates__vote">
                                @Html.ActionLink("Edit", "ActorEdit", new { id = actor.Id }, new { @class = "btn btn-md btn--warning" })
                                @using (Html.BeginForm("ActorDelete", "Moderator", FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Hidden("id", actor.Id)
                                    <button class="btn btn-md btn--danger" type="submit">Delete</button>
                                }
                            </td>

                        </tr>
                        count++;
                    }
                </table>
                @Html.PagedListPager(Model.Actors, page => Url.Action("ViewActors",
                                   new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.ActorsFilter }))

            </div>

        </div>


    </div>

    @Html.Partial("_ModeratorMenu")


</section>
